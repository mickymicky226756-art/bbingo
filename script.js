// =================================================================
// ETHIO BINGO - FRONT-END JAVASCRIPT LOGIC (script.js)
// ·ã®·àò·å®·à®·àª ·àõ·àµ·â∞·ä´·ä®·ã´·ãé·âΩ:
// ** ·âµ·àç·âÖ ·àà·ãç·å•: ·àÅ·àâ·àù ·ã≥·â≥·ãé·âΩ (Registered Users, Recharge/Withdrawal) ·â†·ä†·ãµ·àö·äë ·âÅ·å•·à≠ ·àµ·à≠
//    Local Storage ·ãç·àµ·å• ·ä•·äï·ã≤·âÄ·àò·å° ·â∞·ã∞·à≠·åì·àç::
// ** ·ä†·ã≤·àµ ·àà·ãç·å•: ·ä†·ãµ·àö·äï ·â†·àå·àã ·àµ·àç·ä≠ ·ã®·â∞·àã·ä® ·ã≥·â≥ ·ãà·ã≤·ã´·ãç·äë ·àà·àõ·ã®·âµ ·ã®·àö·ã´·àµ·âΩ·àç '·ã≥·â≥ ·ä†·ãµ·àµ' (Force Refresh)
//    ·ä†·ãù·à´·à≠ ·â†·ä†·ãµ·àö·äï ·åà·åΩ ·àã·ã≠ ·â∞·å®·àù·àØ·àç::
// =================================================================

// 1. ·åç·àé·â£·àç ·â∞·àà·ãã·ãã·åÆ·âΩ (Global Variables)
let isLoggedIn = false; 
let currentBalance = 0.00; 
let currentUser = null; 
// ·ä•·äê·ãö·àÖ ·â∞·àà·ãã·ãã·åÆ·âΩ ·ã®·àö·àû·àâ·âµ ·ä® Local Storage ·àã·ã≠ ·äê·ãç
let pendingRecharges = []; 
let pendingWithdrawals = []; 
let isAdmin = false; 
const appContainer = document.getElementById('app-container');
const navContainer = document.getElementById('main-nav'); 
const adminTelebirrPhone = '0922675655'; // ·ã®·ä†·ãµ·àö·äë ·âã·àö ·âÅ·å•·à≠
const adminTelebirrName = '·àö·ä™·ã´·àµ'; 

// ·ã®·â∞·àò·ãò·åà·â° ·â∞·å†·âÉ·àö·ãé·âΩ·äï ·àò·à®·åÉ ·àà·àõ·àµ·âÄ·àò·å•
const registeredUsers = []; 

// ·ã®·ä†·ãµ·àö·äï ·àò·àà·ã´·ãç·äï ·â†·âÖ·ãµ·àö·ã´ ·ãà·ã∞ ·ãù·à≠·ãù·à© ·àõ·àµ·åà·â£·âµ
const defaultAdmin = { phone: adminTelebirrPhone, password: 'adminpass', name: adminTelebirrName, balance: 1000.00, referralCode: 'ET95655123' };


function generateReferralCode(phone) {
    const lastFour = phone.slice(-4);
    const randomThree = Math.floor(100 + Math.random() * 900);
    return `ET${lastFour}${randomThree}`;
}

function copyReferralCode(code) {
    navigator.clipboard.writeText(code).then(() => {
        const messageElement = document.getElementById('copy-message');
        if (messageElement) {
            messageElement.style.display = 'block';
            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 2000);
        }
    }).catch(err => {
        console.error('Copy failed:', err);
        alert('·äÆ·ã±·äï ·àò·åà·àç·â†·å• ·ä†·àç·â∞·âª·àà·àù·ç¢ ·â†·ä•·åÖ·ãé ·ã≠·âÖ·ã±·âµ: ' + code);
    });
}

// ----------------------------------------------------
// 2. ·ã®·ã≥·â≥ ·àõ·àµ·â∞·ã≥·ã∞·à™·ã´ ·çã·äï·ä≠·àΩ·äñ·âΩ (Data Persistence) 
// ----------------------------------------------------

// üîë ·âÅ·àç·çç: ·àÅ·àà·â±·äï·àù ·ã®·â∞·å†·âÉ·àö·ãé·âΩ ·ä•·äì ·ã®·åç·â•·ã≠·âµ ·âÅ·àç·çé·âΩ·äï ·ä®·ä†·ãµ·àö·äë ·âÅ·å•·à≠ ·åã·à≠ ·àõ·ã´·ã´·ãù
function getGlobalStorageKey(key) {
    // ·ã≠·àÖ ·âÅ·àç·çç ·àÅ·àç·åä·ãú ·â†·àÅ·àâ·àù ·â•·àÆ·ãç·ãò·àÆ·âΩ ·àã·ã≠ ·â∞·àò·à≥·à≥·ã≠ ·àµ·àà·àÜ·äê ·ä•·äï·ã∞ ·àõ·ä•·ä®·àã·ãä ·ã≥·â≥·â§·ãù ·ã´·åà·àà·åç·àã·àç
    return `${key}_${adminTelebirrPhone}`;
}

function saveAllData() {
    // 1. ·ã®·â∞·å†·âÉ·àö·ãé·âΩ·äï ·àò·à®·åÉ ·â† GLOBAL ·âÅ·àç·çç ·àõ·àµ·âÄ·àò·å•
    localStorage.setItem(getGlobalStorageKey('registeredUsers'), JSON.stringify(registeredUsers));
    
    // 2. ·ã®·åç·â•·ã≠·âµ ·å•·ã´·âÑ·ãé·âΩ·äï ·â† GLOBAL ·âÅ·àç·çç ·àõ·àµ·âÄ·àò·å•
    localStorage.setItem(getGlobalStorageKey('pendingRecharges'), JSON.stringify(pendingRecharges));
    localStorage.setItem(getGlobalStorageKey('pendingWithdrawals'), JSON.stringify(pendingWithdrawals));
    
    // 3. ·ã®·ä†·àÅ·äï ·â∞·å†·âÉ·àö·ãç ·ä≠·çç·àà·åä·ãú ·àõ·àµ·âÄ·àò·å• (local to browser)
    if (currentUser) {
        localStorage.setItem('currentUserPhone', currentUser.phone); 
    } else {
        localStorage.removeItem('currentUserPhone');
    }
}

function loadAllData() {
    // 1. ·ã®·â∞·å†·âÉ·àö·ãé·âΩ·äï ·àò·à®·åÉ ·ä® GLOBAL ·âÅ·àç·çç ·àò·å´·äï
    const savedUsersGlobal = localStorage.getItem(getGlobalStorageKey('registeredUsers'));
    
    if (savedUsersGlobal) {
        const loadedUsers = JSON.parse(savedUsersGlobal);
        // ·äê·â£·à©·äï ·ãù·à≠·ãù·à≠ ·â†·àõ·çÖ·ã≥·âµ ·â†·ä†·ã≤·à± ·àò·â∞·ä´·âµ
        registeredUsers.splice(0, registeredUsers.length, ...loadedUsers);
    } else {
         registeredUsers.splice(0, registeredUsers.length); 
    }
    
    // ·ã®·ä†·ãµ·àö·äï ·àò·àà·ã´ ·ä®·àå·àà ·àõ·àµ·åà·â£·âµ
    const adminExists = registeredUsers.some(u => u.phone === defaultAdmin.phone);
    if (!adminExists) {
         registeredUsers.push(defaultAdmin);
    }
    
    // 2. ·ã®·åç·â•·ã≠·âµ ·àò·à®·åÉ·ãé·âΩ·äï ·ä® GLOBAL ·âÅ·àç·çç ·àò·å´·äï
    const savedRechargesGlobal = localStorage.getItem(getGlobalStorageKey('pendingRecharges'));
    const savedWithdrawalsGlobal = localStorage.getItem(getGlobalStorageKey('pendingWithdrawals'));
    
    if (savedRechargesGlobal) {
        pendingRecharges.splice(0, pendingRecharges.length, ...JSON.parse(savedRechargesGlobal));
    } else {
        pendingRecharges.splice(0, pendingRecharges.length);
    }
    
    if (savedWithdrawalsGlobal) {
        pendingWithdrawals.splice(0, pendingWithdrawals.length, ...JSON.parse(savedWithdrawalsGlobal));
    } else {
         pendingWithdrawals.splice(0, pendingWithdrawals.length);
    }
    
    // 3. ·ã®·â∞·å†·âÉ·àö·ãç ·ä≠·çç·àà·åä·ãú (Session) ·ä´·àà ·àò·å´·äï
    const savedCurrentUserPhone = localStorage.getItem('currentUserPhone');
    
    if (savedCurrentUserPhone) {
        // ·àÅ·àç·åä·ãú ·ä®·â∞·å´·äê·ãç GLOBAL ·ãù·à≠·ãù·à≠ ·àã·ã≠ ·àò·çà·àà·åç
        currentUser = registeredUsers.find(user => user.phone === savedCurrentUserPhone);
        if (currentUser) {
            isLoggedIn = true;
            currentBalance = currentUser.balance;
            isAdmin = (currentUser.phone === adminTelebirrPhone);
        } else {
            handleLogout(false);
        }
    }
}

// ----------------------------------------------------
// 3. ·ã®·åà·åΩ ·ä†·à∞·à≥ ·ä•·äì ·åÖ·àù·à≠ (Navigation and Initialization)
// ----------------------------------------------------

// üîë ·ä†·ã≤·àµ ·çã·äï·ä≠·àΩ·äï: ·ä†·ãµ·àö·äë ·ã≥·â≥·ãç·äï ·â†·åç·ã≥·åÖ ·ä•·äï·ã≤·ã´·ãµ·àµ
function forceDataRefresh() {
    loadAllData();
    renderAccountPage();
    alert('·ã≥·â≥·ãç ·ä®·ä†·ã≤·à± ·àò·à®·åÉ ·åã·à≠ ·â∞·ãò·àù·äó·àç·ç¢');
}

function renderNavbar() {
    if (!navContainer) return; 
    let navHtml = '';
    const currentHash = window.location.hash;
    
    const balanceDisplay = isLoggedIn ? 
        `<span style="margin-left: 10px; padding: 5px 10px; background-color: #f7b731; color: #333; border-radius: 5px; font-weight: bold;">Wallet: ETB ${currentBalance.toFixed(2)}</span>` : '';

    if (isLoggedIn) {
        navHtml = `
            <a href="#account-page" class="${currentHash === '#account-page' ? 'active' : ''}">
                <i class="fas fa-user-circle"></i> ·ã®·äî ·àò·àà·ã´
            </a>
            
            ${balanceDisplay}
            <button onclick="handleLogout()" class="nav-logout-btn">
                <i class="fas fa-sign-out-alt"></i> ·ãç·å£
            </button>
        `;
    } else {
        navHtml = `
            <a href="#login-page" class="${currentHash === '#login-page' ? 'active' : ''}">
                <i class="fas fa-sign-in-alt"></i> ·åç·â£
            </a>
            <a href="#register-page" class="${currentHash === '#register-page' || currentHash === '' ? 'active' : ''}">
                <i class="fas fa-user-plus"></i> ·â∞·àò·ãù·åà·â•
            </a>
        `;
    }
    
    // ·ã® Navbar CSS Style
    navContainer.style.cssText = `
        display: flex; 
        justify-content: space-around; 
        align-items: center;
        background-color: #333; 
        padding: 5px 0; 
        position: sticky; 
        top: 0; 
        z-index: 1000;
        border-bottom: 2px solid #004a99;
    `;
    navContainer.innerHTML = navHtml;

    navContainer.querySelectorAll('a, button').forEach(link => {
        link.style.cssText += `
            color: #fff; 
            text-decoration: none; 
            padding: 10px 15px; 
            margin: 0 5px; 
            border-radius: 5px;
            transition: background-color 0.3s;
            font-family: inherit;
        `;
        
        if (link.tagName === 'A' && link.classList.contains('active')) {
            link.style.backgroundColor = '#004a99';
        } else if (link.tagName === 'A') {
            link.style.backgroundColor = 'transparent';
        } else if (link.classList.contains('nav-logout-btn')) {
             link.style.cssText += `
                background: none; 
                border: none; 
                color: #fff; 
                cursor: pointer; 
                font-size: 1em;
             `;
        }

        link.onmouseover = function() { this.style.backgroundColor = '#555'; };
        link.onmouseout = function() { 
            if (link.tagName === 'A' && this.classList.contains('active')) {
                this.style.backgroundColor = '#004a99';
            } else if (link.classList.contains('nav-logout-btn')) {
                 this.style.backgroundColor = 'transparent';
            } else {
                this.style.backgroundColor = 'transparent';
            }
        };
    });
}

function renderRegisterPage() {
    appContainer.innerHTML = `<div class="page-container"><h2>·ä†·ã≤·àµ ·àò·àà·ã´ ·ã≠·ä≠·çà·â±</h2><form id="register-form"><div class="form-group"><label for="reg-name"><i class="fas fa-user"></i> ·àµ·àù·ãé·äï ·ã´·àµ·åà·â°:</label><input type="text" id="reg-name" name="name" placeholder="·àô·àâ ·àµ·àù·ãé·äï ·ã´·àµ·åà·â°" required></div><div class="form-group"><label for="reg-phone"><i class="fas fa-phone"></i> ·àµ·àç·ä≠ ·âÅ·å•·à≠:</label><input type="tel" id="reg-phone" name="phone" placeholder="·àà·àù·à≥·àå: 09..." required></div><div class="form-group"><label for="reg-password"><i class="fas fa-lock"></i> ·ã®·ã≠·àà·çç ·âÉ·àç:</label><input type="password" id="reg-password" name="password" required></div><div class="form-group"><label for="reg-confirm-password"><i class="fas fa-check-lock"></i> ·ã®·ã≠·àà·çç ·âÉ·àç ·ä†·à®·åã·åç·å•:</label><input type="password" id="reg-confirm-password" name="confirm_password" required></div><div class="form-group"><label for="reg-invite"><i class="fas fa-user-plus"></i> ·ã®·àò·åã·â†·ã£ ·äÆ·ãµ (·ä†·àõ·à´·å≠):</label><input type="text" id="reg-invite" name="invite_code" placeholder="·åã·â£·ã• ·ä´·àà ·äÆ·ã±·äï ·ã´·àµ·åà·â°"></div><button type="submit" class="submit-button">·àò·ãù·åç·â•</button><p style="margin-top: 15px;">·àò·àà·ã´ ·ä†·àà·ãé·âµ? <a href="#login-page">·ã≠·åç·â°</a></p></form></div>`;
    document.getElementById('register-form').addEventListener('submit', handleRegistration);
}
function handleRegistration(e) {
    e.preventDefault();
    loadAllData(); // ·ä®·àò·àò·ãù·åà·â• ·â†·çä·âµ ·ã´·àâ·âµ·äï ·â∞·å†·âÉ·àö·ãé·âΩ ·àò·å´·äï (·àÅ·àç·åä·ãú GLOBAL ·ãù·à≠·ãù·à©·äï)
    
    const name = document.getElementById('reg-name').value.trim(); 
    const phone = document.getElementById('reg-phone').value;
    const password = document.getElementById('reg-password').value;
    const confirmPassword = document.getElementById('reg-confirm-password').value; 
    const inviteCode = document.getElementById('reg-invite').value.trim().toUpperCase(); 
    if (password !== confirmPassword) { alert('·ã®·ã≠·àà·çç ·âÉ·àâ ·ä•·äì ·ã®·àõ·à®·åã·åà·å´ ·ã≠·àà·çç ·âÉ·àâ ·ä†·ã≠·àò·à≥·à∞·àà·àâ·àù! ·ä•·â£·ä≠·ãé ·â†·âµ·ä≠·ä≠·àç ·ã´·àµ·åà·â°·ç¢'); return; }
    if (name.length < 2) { alert('·ä•·â£·ä≠·ãé ·âµ·ä≠·ä≠·àà·äõ ·àµ·àù·ãé·äï ·ã´·àµ·åà·â°·ç¢'); return; }
    
    // ·ã®·â∞·å´·äê·ãç·äï GLOBAL ·ãù·à≠·ãù·à≠ ·â†·àò·å†·âÄ·àù ·àõ·à®·åã·åà·å•
    if (registeredUsers.some(user => user.phone === phone)) { alert(`·ã≠·àÖ ·àµ·àç·ä≠ ·âÅ·å•·à≠ (${phone}) ·ä†·àµ·âÄ·ãµ·àû ·â∞·àò·ãù·åç·âß·àç·ç¢ ·ãà·ã∞ ·àò·åç·â¢·ã´ ·åà·åΩ ·ã≠·àÇ·ã±·ç¢`); return; }
    
    const newReferralCode = generateReferralCode(phone);
    
    const newUser = { phone: phone, password: password, name: name, balance: 0.00, referralCode: newReferralCode };
    registeredUsers.push(newUser); // ·ãà·ã∞ GLOBAL ·ãù·à≠·ãù·à≠ ·àò·å®·àò·à≠
    
    let rewardMessage = '';
    if (inviteCode) {
        const referrer = registeredUsers.find(user => user.referralCode === inviteCode);
        if (referrer && referrer.phone !== phone) {
            const rewardAmount = 10.00;
            referrer.balance += rewardAmount; 
            // ·åã·â£·ã° ·ã®·àà·ãç·å• ·àò·à®·åÉ ·ä•·äï·ã≤·åà·â£·â†·âµ ·àõ·ãµ·à®·åç
            const referrerIndex = registeredUsers.findIndex(u => u.phone === referrer.phone);
            if (referrerIndex !== -1) {
                 registeredUsers[referrerIndex] = referrer;
            }
            rewardMessage = `·ä•·äì ·åã·â£·ã•·ãé (${referrer.name}) ·â† ${rewardAmount.toFixed(2)} ETB ·àΩ·àç·àõ·âµ ·ä†·åç·äù·â∞·ãã·àç·ç¢`;
        } else if (referrer && referrer.phone === phone) { alert("·ã®·à´·àµ·ãé·äï ·àµ·àç·ä≠ ·âÅ·å•·à≠ ·ãà·ã≠·àù ·äÆ·ãµ ·àò·å†·âÄ·àù ·ä†·ã≠·âΩ·àâ·àù!"); } 
        else { alert("·ã´·àµ·åà·â°·âµ ·ã®·àò·åã·â†·ã£ ·äÆ·ãµ ·âµ·ä≠·ä≠·àç ·ä†·ã≠·ã∞·àà·àù·ç¢"); }
    }
    
    saveAllData(); // GLOBAL ·ãù·à≠·ãù·à©·äï ·àõ·àµ·âÄ·àò·å• (·àà·ä†·ãµ·àö·äë ·ä•·äï·ã≤·ã∞·à≠·à∞·ãç)
    
    alert(`·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àò·ãù·åç·â†·ãã·àç! ·ä†·àÅ·äï ·àò·åç·â£·âµ ·ã≠·âΩ·àã·àâ·ç¢ ${rewardMessage}`);
    window.location.hash = '#login-page'; 
}
function renderLoginPage() {
    appContainer.innerHTML = `<div class="page-container"><h2>·ãà·ã∞ ·àò·àà·ã´·ãé ·ã≠·åç·â°</h2><form id="login-form"><div class="form-group"><label for="log-phone"><i class="fas fa-phone"></i> ·àµ·àç·ä≠ ·âÅ·å•·à≠:</label><input type="tel" id="log-phone" name="phone" required></div><div class="form-group"><label for="log-password"><i class="fas fa-lock"></i> ·ã®·ã≠·àà·çç ·âÉ·àç:</label><input type="password" id="log-password" name="password" required></div><button type="submit" class="submit-button">·åç·â£</button></form><p style="margin-top: 15px;">·ä†·ã≤·àµ ·äê·ãé·âµ? <a href="#register-page">·ã≠·àò·ãù·åà·â°</a></p></div>`;
    document.getElementById('login-form').addEventListener('submit', handleLogin);
}

function handleLogin(e) {
    e.preventDefault();
    loadAllData(); // ·ä®·àò·åç·â£·âµ ·â†·çä·âµ ·ã´·àâ·âµ·äï ·â∞·å†·âÉ·àö·ãé·âΩ ·àò·å´·äï (GLOBAL ·ãù·à≠·ãù·à©·äï)
    
    const phone = document.getElementById('log-phone').value;
    const password = document.getElementById('log-password').value;
    
    // ·ã®·â∞·å´·äê·ãç·äï GLOBAL ·ãù·à≠·ãù·à≠ ·â†·àò·å†·âÄ·àù ·àò·çà·àà·åç
    const userFound = registeredUsers.find(user => user.phone === phone && user.password === password);
    
    if (userFound) {
        currentUser = userFound;
        currentBalance = currentUser.balance; 
        isAdmin = (phone === adminTelebirrPhone);
        
        isLoggedIn = true;
        
        saveAllData(); // ·ä†·àÅ·äï ·ã®·â∞·åà·â£·â†·âµ·äï userPhone ·â† Local Storage ·àõ·àµ·âÄ·àò·å•
        
        alert(isAdmin ? '·â†·ä†·ãµ·àö·äï·äê·âµ ·åà·â•·â∞·ãã·àç!' : '·â†·â∞·å†·âÉ·àö·äê·âµ ·åà·â•·â∞·ãã·àç!');
        renderNavbar(); 
        window.location.hash = '#account-page';
    } else {
        alert('·àµ·àç·ä≠ ·âÅ·å•·à≠ ·ãà·ã≠·àù ·ã®·ã≠·àà·çç ·âÉ·àç ·âµ·ä≠·ä≠·àç ·ä†·ã≠·ã∞·àà·àù·ç¢ ·ãà·ã≠·àù ·ä†·àç·â∞·àò·ãò·åà·â°·àù·ç¢');
        isLoggedIn = false;
        isAdmin = false;
        currentUser = null;
        saveAllData(); 
    }
}

function renderWithdrawFormPage() {
    if (!isLoggedIn || !currentUser) { window.location.hash = '#login-page'; return; }
    appContainer.innerHTML = `<div class="page-container"><h2><i class="fas fa-minus-circle"></i> ·åà·äï·ãò·â• ·ä†·ãç·å£ (Withdraw)</h2><div class="account-info" style="margin-bottom: 20px;"><p>·ä†·àÅ·äï ·ã´·àà·ãé·âµ ·âÄ·à™ ·àÇ·à≥·â•: **ETB ${currentUser.balance.toFixed(2)}**</p></div><form id="withdraw-form" style="margin-top: 20px;"><div class="form-group"><label for="withdraw-bank"><i class="fas fa-university"></i> ·åà·äï·ãò·â• ·ã®·àö·àã·ä≠·â†·âµ ·â£·äï·ä≠:</label><select id="withdraw-bank" name="bank" required><option value="">-- ·â£·äï·ä≠ ·ã≠·àù·à®·å° --</option><option value="CBE">·äï·åç·ãµ ·â£·äï·ä≠ (CBE)</option><option value="Abyssinia">·ä†·â¢·à≤·äí·ã´ ·â£·äï·ä≠</option><option value="Dashen">·ã≥·àΩ·äï ·â£·äï·ä≠</option><option value="Telebirr">·â¥·àå·â•·à≠</option><option value="Awash">·ä†·ãã·àΩ ·â£·äï·ä≠</option></select></div><div class="form-group"><label for="withdraw-account"><i class="fas fa-wallet"></i> ·ã®·â£·äï·ä≠ ·àÇ·à≥·â•/·àµ·àç·ä≠ ·âÅ·å•·à≠:</label><input type="text" id="withdraw-account" placeholder="·ã®·â£·äï·ä≠ ·àÇ·à≥·â• ·âÅ·å•·à≠ ·ãà·ã≠·àù ·ã®·â¥·àå·â•·à≠ ·àµ·àç·ä≠" required></div><div class="form-group"><label for="withdraw-name"><i class="fas fa-user-tag"></i> ·ã®·àµ·àù·ãé ·àõ·à®·åã·åà·å´:</label><input type="text" id="withdraw-name" placeholder="·â†·â£·äï·ä≠ ·ä†·ä´·ãç·äï·âµ ·àã·ã≠ ·ã´·àà·ãé·âµ·äï ·àµ·àù ·ã´·àµ·åà·â°" required></div><div class="form-group"><label for="withdraw-amount"><i class="fas fa-money-bill-wave"></i> ·ã®·åà·äï·ãò·â• ·àò·å†·äï (ETB):</label><input type="number" id="withdraw-amount" required min="10"></div><button type="submit" class="submit-button btn-withdraw">·å•·ã´·âÑ ·àã·ä≠</button></form><button onclick="window.location.hash = '#account-page'" class="submit-button" style="background-color: #aaa; margin-top: 10px;">·â∞·àò·àà·àµ</button></div>`;
    document.getElementById('withdraw-form').addEventListener('submit', handleWithdraw);
}
function renderRechargeFormPage() {
    if (!isLoggedIn) { window.location.hash = '#login-page'; return; }
    appContainer.innerHTML = `<div class="page-container"><h2><i class="fas fa-plus-circle"></i> ·åà·äï·ãò·â• ·ä†·àµ·åà·â£ (Recharge)</h2><div class="account-info" style="text-align: center;"><p style="font-size: 1.1em; font-weight: bold; color: #cc0000;">**·àò·åÄ·àò·à™·ã´ ·åà·äï·ãò·â°·äï ·ã≠·àã·ä©!**</p><p>·åà·äï·ãò·â°·äï ·ãà·ã∞·àö·ä®·â∞·àà·ãç ·ã®·â¥·àå·â•·à≠ ·âÅ·å•·à≠ ·ã≠·àã·ä©·ç°</p><p style="font-size: 1.4em; color: #004a99; font-weight: bold;"><i class="fas fa-mobile-alt"></i> ${adminTelebirrPhone} (${adminTelebirrName})</p><p style="margin-top: 15px; font-weight: bold;">·åà·äï·ãò·â°·äï ·ä®·àã·ä© ·â†·äã·àã ·ã®·àö·ä®·â∞·àà·ãç·äï ·âÖ·çÖ ·ã≠·àô·àâ·ç¢</p></div><form id="recharge-form" style="margin-top: 20px;"><div class="form-group"><label for="recharge-amount"><i class="fas fa-money-bill-wave"></i> ·ã®·åà·äï·ãò·â• ·àò·å†·äï (ETB):</label><input type="number" id="recharge-amount" required min="10"></div><div class="form-group"><label for="transaction-id"><i class="fas fa-key"></i> ·ã®·åç·â•·ã≠·âµ ·àò·àà·ã´ ·âÅ·å•·à≠ (Transaction ID):</label><input type="text" id="transaction-id" placeholder="·åà·äï·ãò·â• ·ä®·àã·ä© ·â†·äã·àã ·ã®·àö·ã∞·à≠·àµ·ãé·âµ·äï ID ·ã´·àµ·åà·â°" required></div><button type="submit" class="submit-button btn-recharge">·å•·ã´·âÑ ·àã·ä≠</button></form><button onclick="window.location.hash = '#account-page'" class="submit-button" style="background-color: #aaa; margin-top: 10px;">·â∞·àò·àà·àµ</button></div>`;
    document.getElementById('recharge-form').addEventListener('submit', handleRechargeRequest);
}
function handleRechargeRequest(e) {
    e.preventDefault();
    loadAllData(); // ·ã®·âÖ·à≠·â• ·åä·ãú·ãé·âπ·äï ·å•·ã´·âÑ·ãé·âΩ ·ä•·äì ·ã®·â∞·å†·âÉ·àö·ãé·âΩ ·ãù·à≠·ãù·à≠ ·å´·äï
    
    const amount = document.getElementById('recharge-amount').value;
    const transactionId = document.getElementById('transaction-id').value;
    const numAmount = parseFloat(amount);
    if (numAmount < 10) { alert("·â¢·ã´·äï·àµ 10 ETB ·àõ·àµ·åà·â£·âµ ·ä†·àà·â•·ãé·âµ·ç¢"); return; }
    if (transactionId.length < 5) { alert("·ä•·â£·ä≠·ãé ·âµ·ä≠·ä≠·àà·äõ ·ã®·åç·â•·ã≠·âµ ·àò·àà·ã´ ·âÅ·å•·à≠ (Transaction ID) ·ã´·àµ·åà·â°·ç¢"); return; }
    
    // ·ã®·å•·ã´·âÑ·ãç ·àò·à®·åÉ
    const request = { id: Date.now(), userPhone: currentUser.phone, amount: numAmount, transactionId: transactionId, date: new Date().toLocaleString('am-ET'), status: 'Pending' };
    
    // ·å•·ã´·âÑ·ãç·äï ·àò·å®·àò·à≠
    pendingRecharges.push(request); 
    
    // ·â† GLOBAL ·âÅ·àç·çç ·àµ·àù ·àõ·àµ·âÄ·àò·å• (·àÅ·àâ·àù ·â•·àÆ·ãç·ãò·à≠ ·ä•·äï·ã≤·ã´·ã®·ãç)
    saveAllData(); 
    
    alert(`·ã® ETB ${numAmount.toFixed(2)} ·àõ·àµ·åà·â¢·ã´ ·å•·ã´·âÑ·ãé ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àç·ä≥·àç·ç¢`);
    window.location.hash = '#account-page';
}
function confirmRecharge(requestId, amount, userPhone) {
    if (!isAdmin) { alert("·ã≠·àÖ·äï·äï ·â∞·åç·â£·à≠ ·àõ·ä®·äì·ãà·äï ·ã®·àö·âΩ·àâ·âµ ·ä†·ãµ·àö·äñ·âΩ ·â•·âª ·äì·â∏·ãç!"); return; }
    if (!confirm(`·ã≠·àÖ·äï·äï ·ã® ${amount.toFixed(2)} ETB ·åà·â¢ ·â†·ä•·à≠·åç·å• ·àà·â∞·å†·âÉ·àö ${userPhone} ·àõ·à®·åã·åà·å• ·ã≠·çà·àç·åã·àâ?`)) { return; }
    
    loadAllData(); // ·ã®·âÖ·à≠·â• ·åä·ãú·ãç·äï GLOBAL ·ã≥·â≥ ·àò·å´·äï
    
    // ·â∞·å†·âÉ·àö·ãç·äï ·ä® GLOBAL ·ãù·à≠·ãù·à≠ ·àã·ã≠ ·çà·àç·åé ·àõ·åç·äò·âµ
    const targetUser = registeredUsers.find(user => user.phone === userPhone);
    
    if (targetUser) {
        targetUser.balance += amount; 
        
        // ·â†·ãù·à≠·ãù·à© ·àã·ã≠ ·ã´·àà·ãç·äï·àù ·àò·à®·åÉ ·àõ·ãò·àò·äï
        const userIndex = registeredUsers.findIndex(u => u.phone === userPhone);
        if (userIndex !== -1) {
             registeredUsers[userIndex] = targetUser;
        }
        
        // ·ä†·àÅ·äï ·ã´·àà·ãç·äï ·â∞·å†·âÉ·àö (·ä†·ãµ·àö·äë ·à´·à±) ·âÄ·à™ ·àÇ·à≥·â• ·àõ·ãò·àò·äï (·â¢·ã´·àµ·çà·àç·åç)
        if (currentUser && currentUser.phone === userPhone) { currentUser.balance = targetUser.balance; }
        
        alert(`ETB ${amount.toFixed(2)} ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·ãà·ã∞ ·â∞·å†·âÉ·àö ${userPhone} ·àÇ·à≥·â• ·åà·â•·â∑·àç·ç¢`);
    } else { alert(`·àµ·àç·ä≠ ·âÅ·å•·à≠ ${userPhone} ·ã´·àà·ãç ·â∞·å†·âÉ·àö ·ä†·àç·â∞·åà·äò·àù!`); }
    
    // ·ã®·â∞·à®·åã·åà·å†·ãç·äï ·å•·ã´·âÑ ·ä®·ãù·à≠·ãù·à© ·àõ·àµ·ãà·åà·ãµ
    pendingRecharges = pendingRecharges.filter(req => req.id !== requestId);
    
    saveAllData(); // GLOBAL ·ãù·à≠·ãù·à©·äï ·àõ·àµ·âÄ·àò·å•
    
    renderAccountPage();
}
function handleWithdraw(e) {
    e.preventDefault();
    loadAllData(); // ·ã®·âÖ·à≠·â• ·åä·ãú·ãé·âπ·äï ·å•·ã´·âÑ·ãé·âΩ ·ä•·äì ·ã®·â∞·å†·âÉ·àö·ãé·âΩ ·ãù·à≠·ãù·à≠ ·å´·äï
    
    const bank = document.getElementById('withdraw-bank').value;
    const account = document.getElementById('withdraw-account').value;
    const name = document.getElementById('withdraw-name').value;
    const amount = document.getElementById('withdraw-amount').value;
    const numAmount = parseFloat(amount);
    
    if (numAmount < 10) { alert("·â¢·ã´·äï·àµ 10 ETB ·àõ·ãç·å£·âµ ·ä†·àà·â•·ãé·âµ·ç¢"); return; }
    
    // ·ã®·âÖ·à≠·â• ·åä·ãú·ãç ·âÄ·à™ ·àÇ·à≥·â• ·àã·ã≠ ·àò·àû·ä®·à≠
    const updatedUser = registeredUsers.find(u => u.phone === currentUser.phone);
    if (!updatedUser || numAmount > updatedUser.balance) { 
        alert("·â†·àò·àà·ã´·ãé ·ãç·àµ·å• ·â†·âÇ ·åà·äï·ãò·â• ·ã®·àà·àù! ·âÄ·à™ ·àÇ·à≥·â•: ETB " + (updatedUser ? updatedUser.balance.toFixed(2) : currentBalance.toFixed(2))); 
        return; 
    }
    
    // ·åà·äï·ãò·â°·äï ·àò·âÄ·äê·àµ
    updatedUser.balance -= numAmount; 
    currentUser.balance = updatedUser.balance;
    currentBalance = currentUser.balance; 
    
    // ·â† GLOBAL ·ãù·à≠·ãù·à≠ ·àã·ã≠ ·ã´·àà·ãç·äï·àù ·àò·à®·åÉ ·àõ·ãò·àò·äï
    const userIndex = registeredUsers.findIndex(u => u.phone === currentUser.phone);
    if (userIndex !== -1) {
        registeredUsers[userIndex].balance = currentBalance;
    }
    
    // ·ã®·àõ·ãç·å´ ·å•·ã´·âÑ·ãç·äï ·àò·å®·àò·à≠
    const request = { id: Date.now(), userPhone: currentUser.phone, userName: currentUser.name, amount: numAmount, bank: bank, account: account, accountName: name, date: new Date().toLocaleString('am-ET'), status: 'Pending' };
    pendingWithdrawals.push(request); 
    
    // ·â† GLOBAL ·âÅ·àç·çç ·àµ·àù ·àõ·àµ·âÄ·àò·å• (·àÅ·àâ·àù ·â•·àÆ·ãç·ãò·à≠ ·ä•·äï·ã≤·ã´·ã®·ãç)
    saveAllData(); 
    
    alert(`·ã® ETB ${numAmount.toFixed(2)} ·ã®·àõ·ãç·å´ ·å•·ã´·âÑ·ãé ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àç·ä≥·àç·ç¢`);
    window.location.hash = '#account-page';
}
function confirmWithdrawal(requestId) {
    if (!isAdmin) { alert("·ã≠·àÖ·äï·äï ·â∞·åç·â£·à≠ ·àõ·ä®·äì·ãà·äï ·ã®·àö·âΩ·àâ·âµ ·ä†·ãµ·àö·äñ·âΩ ·â•·âª ·äì·â∏·ãç!"); return; }
    
    loadAllData(); // ·ã®·âÖ·à≠·â• ·åä·ãú·ãç·äï GLOBAL ·ã≥·â≥ ·àò·å´·äï
    
    const request = pendingWithdrawals.find(req => req.id === requestId);
    if (!request) { alert("·ã≠·àÖ ·ã®·àõ·ãç·å´ ·å•·ã´·âÑ ·ä†·àç·â∞·åà·äò·àù!"); return; }
    if (!confirm(`·åà·äï·ãò·â°·äï ·àà·â∞·å†·âÉ·àö·ãç ${request.userPhone} ·ãà·ã∞ ${request.bank} ·ä†·ä´·ãç·äï·âµ ${request.account} ·ä†·àµ·â∞·àã·àç·çà·ãã·àç?`)) { return; }
    
    // ·ã®·â∞·à®·åã·åà·å†·ãç·äï ·å•·ã´·âÑ ·ä®·ãù·à≠·ãù·à© ·àõ·àµ·ãà·åà·ãµ
    pendingWithdrawals = pendingWithdrawals.filter(req => req.id !== requestId);
    
    saveAllData(); // GLOBAL ·ãù·à≠·ãù·à©·äï ·àõ·àµ·âÄ·àò·å•
    
    renderAccountPage();
}

// ----------------------------------------------------
// ·ã®·ã≠·àà·çç ·âÉ·àç ·àò·âÄ·ã®·à™·ã´ ·àé·åÇ·ä≠
// ----------------------------------------------------

function renderChangePasswordPage() {
    if (!isLoggedIn || !currentUser) { window.location.hash = '#login-page'; return; }
    
    appContainer.innerHTML = `
        <div class="page-container">
            <h2><i class="fas fa-key"></i> ·ã®·ã≠·àà·çç ·âÉ·àç ·àò·âÄ·ã®·à™·ã´</h2>
            <form id="change-password-form">
                <div class="form-group">
                    <label for="old-password"><i class="fas fa-lock"></i> ·ä†·àÅ·äï ·ã´·àà·ãé ·ã®·ã≠·àà·çç ·âÉ·àç:</label>
                    <input type="password" id="old-password" required>
                </div>
                <div class="form-group">
                    <label for="new-password"><i class="fas fa-unlock-alt"></i> ·ä†·ã≤·àµ ·ã®·ã≠·àà·çç ·âÉ·àç:</label>
                    <input type="password" id="new-password" required minlength="5">
                </div>
                <div class="form-group">
                    <label for="confirm-new-password"><i class="fas fa-check-lock"></i> ·ä†·ã≤·àµ ·ã®·ã≠·àà·çç ·âÉ·àç ·ä†·à®·åã·åç·å•:</label>
                    <input type="password" id="confirm-new-password" required minlength="5">
                </div>
                <button type="submit" class="submit-button" style="background-color: #004a99;">·âÄ·ã≠·à≠</button>
            </form>
            <button onclick="window.location.hash = '#account-page'" class="submit-button" style="background-color: #aaa; margin-top: 10px;">·â∞·àò·àà·àµ</button>
        </div>
    `;
    document.getElementById('change-password-form').addEventListener('submit', handleChangePassword);
}

function handleChangePassword(e) {
    e.preventDefault();
    
    const oldPassword = document.getElementById('old-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmNewPassword = document.getElementById('confirm-new-password').value;

    // 1. ·ã®·ãµ·àÆ ·ã®·ã≠·àà·çç ·âÉ·àç ·àõ·à®·åã·åà·å•
    if (oldPassword !== currentUser.password) {
        alert("·ä†·àÅ·äï ·ã´·àµ·åà·â°·âµ ·ã®·ã≠·àà·çç ·âÉ·àç ·âµ·ä≠·ä≠·àç ·ä†·ã≠·ã∞·àà·àù!");
        return;
    }

    // 2. ·ä†·ã≤·à± ·ã®·ã≠·àà·çç ·âÉ·àç ·àõ·à®·åã·åà·å•
    if (newPassword.length < 5) {
        alert("·ä†·ã≤·à± ·ã®·ã≠·àà·çç ·âÉ·àç ·â¢·ã´·äï·àµ 5 ·çä·ã∞·àã·âµ/·âÅ·å•·àÆ·âΩ ·àò·ã´·ãù ·ä†·àà·â†·âµ·ç¢");
        return;
    }
    
    if (newPassword !== confirmNewPassword) {
        alert("·ä†·ã≤·à± ·ã®·ã≠·àà·çç ·âÉ·àç ·ä•·äì ·ã®·àõ·à®·åã·åà·å´·ãç ·âÉ·àç ·ä†·ã≠·àò·à≥·à∞·àà·àâ·àù!");
        return;
    }
    
    if (newPassword === oldPassword) {
        alert("·ä†·ã≤·àµ ·ã®·ã≠·àà·çç ·âÉ·àç·ãé ·ä®·ãµ·àÆ·ãç ·ã®·ã≠·àà·çç ·âÉ·àç·ãé ·åã·à≠ ·àò·àò·à≥·à∞·àç ·ã®·àà·â†·âµ·àù!");
        return;
    }

    // 3. ·ã®·ã≠·àà·çç ·âÉ·àâ·äï ·â†currentUser ·àã·ã≠ ·àõ·ãò·àò·äï
    currentUser.password = newPassword;

    // 4. ·â† GLOBAL ·ãù·à≠·ãù·à≠ ·ãç·àµ·å• ·àõ·ãò·àò·äï ·ä•·äì ·ã≥·â≥·ãç·äï ·àõ·àµ·âÄ·àò·å•
    const userIndex = registeredUsers.findIndex(u => u.phone === currentUser.phone);
    if (userIndex !== -1) {
        registeredUsers[userIndex].password = newPassword;
    }
    
    saveAllData(); // GLOBAL ·ãù·à≠·ãù·à©·äï ·àõ·àµ·âÄ·àò·å•

    alert("·ã®·ã≠·àà·çç ·âÉ·àç·ãé ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·âÄ·ã≠·àØ·àç·ç¢");
    window.location.hash = '#account-page';
}

// ----------------------------------------------------
// 4. ·ã®·åà·åΩ ·ä†·à≥·àæ·âΩ (Page Renderers)
// ----------------------------------------------------

// ·ä†·ã≤·àµ ·ã®·â∞·àò·ãò·åà·â° ·â∞·å†·âÉ·àö·ãé·âΩ·äï ·ãù·à≠·ãù·à≠ ·ã®·àö·ã´·à≥·ã≠ ·åà·åΩ
function renderUserListPage() {
     if (!isAdmin) { 
        alert('·ã≠·àÖ·äï·äï ·åà·åΩ ·àõ·ã®·âµ ·ã®·àö·âΩ·àâ·âµ ·ä†·ãµ·àö·äñ·âΩ ·â•·âª ·äì·â∏·ãç!'); 
        window.location.hash = '#account-page'; 
        return; 
    }
    
    loadAllData(); // ·ã®·âÖ·à≠·â• ·åä·ãú·ãç·äï GLOBAL ·ãù·à≠·ãù·à≠ ·àò·å´·äï
    
    const usersHtml = registeredUsers.filter(u => u.phone !== adminTelebirrPhone).map(user => `
        <li style="border: 1px solid #ccc; padding: 10px; margin-bottom: 8px; border-radius: 4px; background-color: #f9f9f9;">
            <strong>·àµ·àù:</strong> ${user.name}<br>
            <strong>·àµ·àç·ä≠ ·âÅ·å•·à≠:</strong> ${user.phone}<br>
            <strong>·âÄ·à™ ·àÇ·à≥·â•:</strong> ETB ${user.balance.toFixed(2)}<br>
            <strong>·äÆ·ãµ:</strong> ${user.referralCode}
        </li>
    `).join('');
    
    appContainer.innerHTML = `
        <div class="page-container">
            <h2><i class="fas fa-users"></i> ·ã®·â∞·àò·ãò·åà·â° ·â∞·å†·âÉ·àö·ãé·âΩ ·ãù·à≠·ãù·à≠</h2>
            <p>·å†·âÖ·àã·àã ·â∞·å†·âÉ·àö·ãé·âΩ (·ä®·ä†·ãµ·àö·äï ·ãç·å™): ${registeredUsers.length - 1}</p>
            <ul style="list-style-type: none; padding: 0; text-align: left; margin-top: 15px;">
                ${usersHtml.length > 0 ? usersHtml : '<p>·ã®·â∞·àò·ãò·åà·â° ·â∞·å†·âÉ·àö·ãé·âΩ ·ã®·àâ·àù·ç¢</p>'}
            </ul>
            <button onclick="window.location.hash = '#account-page'" class="submit-button" style="background-color: #aaa; margin-top: 20px;">·â∞·àò·àà·àµ</button>
            <button class="submit-button" style="background-color: #f7b731; color: #333; margin-top: 10px; border: none;" onclick="forceDataRefresh()">
                <i class="fas fa-sync-alt"></i> ·ã≥·â≥ ·ä†·ãµ·àµ (Force Refresh)
            </button>
        </div>
    `;
}

function renderAccountPage() {
    if (!isLoggedIn || !currentUser) { alert('·àò·åÄ·àò·à™·ã´ ·ã≠·åç·â°!'); window.location.hash = '#login-page'; return; }
    
    // ·åà·åπ ·à≤·ä®·çà·âµ ·ã®·âÖ·à≠·â• ·åä·ãú·ãç·äï ·ã≥·â≥ ·àò·å´·äï
    loadAllData(); 
    
    // ·ã®·âÖ·à≠·â• ·åä·ãú·ãç·äï ·âÄ·à™ ·àÇ·à≥·â• ·ä®·àò·ãù·åà·â• ·àã·ã≠ ·àõ·åç·äò·âµ
    const updatedUser = registeredUsers.find(u => u.phone === currentUser.phone);
    if (updatedUser) {
        currentUser.balance = updatedUser.balance;
        currentBalance = updatedUser.balance;
    }

    function getConfirmButton(reqId, reqAmount, reqPhone, type) {
        if (isAdmin) {
            if (type === 'recharge') {
                 return `<button onclick="confirmRecharge(${reqId}, ${reqAmount}, '${reqPhone}')" style="flex-basis: 25%; padding: 5px; background-color: #38761d; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 5px;">·åà·â¢ ·ä†·à®·åã·åç·å•</button>`;
            } else if (type === 'withdraw') {
                 return `<button onclick="confirmWithdrawal(${reqId})" style="flex-basis: 25%; padding: 5px; background-color: #004a99; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 5px;">·ä≠·çç·ã´ ·ä†·à®·åã·åç·å•</button>`;
            }
        }
        return '<span style="color: red; font-weight: bold; margin-top: 5px; display: block;">·â†·àò·å†·â£·â†·âÖ ·àã·ã≠...</span>';
    }
    
    // ·ä†·ãµ·àö·äï ·ä®·àÜ·äê ·àÅ·àâ·äï·àù ·å•·ã´·âÑ ·ã´·ã´·àç·ç£ ·ä´·àç·àÜ·äê ·ã®·à´·à±·äï ·â•·âª
    const userRecharges = pendingRecharges.filter(req => isAdmin || req.userPhone === currentUser.phone);
    const userWithdrawals = pendingWithdrawals.filter(req => isAdmin || req.userPhone === currentUser.phone);
    
    const pendingRechargeHtml = userRecharges.length > 0 ? `<h3 style="margin-top: 20px; color: #cc0000;"><i class="fas fa-clock"></i> ·â†·àò·å†·â£·â†·âÖ ·àã·ã≠ ·ã´·àâ ·åà·â¢·ãé·âΩ (${userRecharges.length}):</h3><ul style="list-style-type: none; padding: 0;">${userRecharges.map(req => {
        return `<li style="border: 1px dashed #ffcc00; padding: 10px; margin-bottom: 5px; border-radius: 4px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;"><div style="flex-basis: ${isAdmin ? '70%' : '100%'}; text-align: left;"><strong>+${req.amount.toFixed(2)} ETB</strong> - ID: <span style="font-weight: bold; color: #004a99;">${req.transactionId}</span>${isAdmin ? `<br><span style="font-size: 0.9em; color: #008080;">·àà: ${req.userPhone}</span>` : ''}<br><span style="font-size: 0.8em; color: #888;">·å•·ã´·âÑ ·ã®·àã·ä©·â†·âµ: ${req.date}</span></div>${getConfirmButton(req.id, req.amount, req.userPhone, 'recharge')}</li>`; }).join('')}</ul>` : '';
    
    const pendingWithdrawalHtml = userWithdrawals.length > 0 ? `<h3 style="margin-top: 20px; color: #9933cc;"><i class="fas fa-hourglass-half"></i> ·â†·àò·å†·â£·â†·âÖ ·àã·ã≠ ·ã´·àâ ·åà·äï·ãò·â• ·àõ·ãç·å´·ãé·âΩ (${userWithdrawals.length}):</h3><ul style="list-style-type: none; padding: 0;">${userWithdrawals.map(req => {
        return `<li style="border: 1px dashed #9933cc; padding: 10px; margin-bottom: 5px; border-radius: 4px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;"><div style="flex-basis: ${isAdmin ? '70%' : '100%'}; text-align: left;"><strong>-ETB ${req.amount.toFixed(2)}</strong> (${req.bank})<br>${isAdmin ? `<span style="font-size: 0.9em; color: #008080;">·àà: ${req.accountName} (${req.account})</span><br>` : ''}<span style="font-size: 0.8em; color: #888;">·å•·ã´·âÑ ·ã®·àã·ä©·â†·âµ: ${req.date}</span></div>${getConfirmButton(req.id, req.amount, req.userPhone, 'withdraw')}</li>`; }).join('')}</ul>` : '';
    
    const adminUserListButton = isAdmin ? 
        `<button class="submit-button" style="background-color: #38761d; color: white; margin-top: 10px;" onclick="window.location.hash = '#user-list-page'">
            <i class="fas fa-users"></i> ·ã®·â∞·àò·ãò·åà·â° ·â∞·å†·âÉ·àö·ãé·âΩ·äï ·ãù·à≠·ãù·à≠ ·ä•·ã≠
        </button>` : '';
        
    const adminRefreshButton = isAdmin ? 
        `<button class="submit-button" style="background-color: #f7b731; color: #333; margin-top: 10px; border: none; font-weight: bold;" onclick="forceDataRefresh()">
            <i class="fas fa-sync-alt"></i> ·ã≥·â≥ ·ä†·ãµ·àµ (Force Refresh)
        </button>
        <p style="font-size: 0.8em; color: #cc0000; margin-top: 5px;">**·ä†·ã≤·àµ ·å•·ã´·âÑ ·à≤·ã∞·à≠·àµ·ãé ·ã≠·àÖ·äï·äï ·ã≠·å†·âÄ·àô**</p>` : '';
        
    appContainer.innerHTML = `
        <div class="page-container">
            <h2><i class="fas fa-user-circle"></i> ·ã®·äî ·àò·àà·ã´ ${isAdmin ? ' (Admin)' : ''}</h2>
            <div class="account-info">
                <h3>·ã®·åç·àç ·àò·àà·ã´ ·àò·à®·åÉ:</h3>
                <p><strong>·àµ·àç·ä≠ ·âÅ·å•·à≠:</strong> ${currentUser.phone}</p>
                <p><strong>·àò·â≥·ãà·âÇ·ã´ (ID):</strong> ETB12345</p>
                <p><strong>·ã®·â∞·àò·ãò·åà·â†·â†·âµ ·àµ·àù:</strong> ${currentUser.name}</p>
                <p class="referral-code-info">
                    <strong>·ã®·ä•·à≠·àµ·ãé ·àò·åã·â†·ã£ ·äÆ·ãµ:</strong> 
                    <span id="my-referral-code" style="font-weight: bold; color: #004a99; cursor: pointer;" onclick="copyReferralCode('${currentUser.referralCode}')">${currentUser.referralCode || '·ä†·àç·â∞·à∞·å†·àù'} <i class="fas fa-copy"></i></span>
                </p>
                <p id="copy-message" style="color: green; font-size: 0.9em; margin-top: 5px; display: none;">·äÆ·ã± ·â∞·âÄ·ãµ·â∑·àç!</p>
                <h3 style="margin-top: 15px;">·ã®·âÄ·à™ ·àÇ·à≥·â•·ãé:</h3>
                <p class="balance">ETB ${currentBalance.toFixed(2)}</p>
                <div class="btn-group">
                    <button class="btn-recharge" onclick="window.location.hash = '#recharge-form-page'"><i class="fas fa-plus-circle"></i> ·åà·äï·ãò·â• ·ä†·àµ·åà·â£</button>
                    <button class="btn-withdraw" onclick="window.location.hash = '#withdraw-form-page'"><i class="fas fa-minus-circle"></i> ·åà·äï·ãò·â• ·ä†·ãç·å£</button>
                </div>
            </div>
            
            ${adminUserListButton} 
            ${adminRefreshButton}
            
            <div class="transaction-section">
                <h3><i class="fas fa-history"></i> ·ã®·åç·â•·ã≠·âµ ·â≥·à™·ä≠ (·äì·àô·äì):</h3>
                <ul>
                    <li>-ETB 10.00 - ·ãç·à≠·à≠·ãµ (·äì·àô·äì)</li>
                    <li>+ETB 5.00 - ·äÆ·àö·àΩ·äï (·äì·àô·äì)</li>
                </ul>
                ${pendingRechargeHtml}
                ${pendingWithdrawalHtml}
            </div>
            
            <button class="submit-button" style="background-color: #cc0000; color: white; margin-top: 20px;" onclick="handleLogout()">
                <i class="fas fa-sign-out-alt"></i> ·ãç·å£
            </button>
            
            <button class="submit-button" style="background-color: #555; color: white; margin-top: 10px;" onclick="window.location.hash = '#change-password-page'">
                <i class="fas fa-key"></i> ·ã®·ã≠·àà·çç ·âÉ·àç ·âÄ·ã≠·à≠
            </button>

        </div>`;
}

function handleLogout(showAlert = true) {
    isLoggedIn = false;
    isAdmin = false;
    currentUser = null;
    currentBalance = 0.00; 
    
    saveAllData(); 
    if (showAlert) {
         alert('·ä®·àò·àà·ã´·ãé ·ãà·å•·â∞·ãã·àç::');
    }
    renderNavbar();
    window.location.hash = '#login-page';
}

function handleHashChange() {
    // ·åà·åπ·äï ·ä®·àò·å´·äë ·â†·çä·âµ ·àÅ·àç·åä·ãú ·ã≥·â≥·ãç·äï ·àò·å´·äï
    loadAllData();

    const hash = window.location.hash;

    if (currentUser) {
        currentBalance = currentUser.balance;
    }
    
    renderNavbar();
    
    // ·àå·àé·âΩ ·åà·åæ·âΩ
    if (hash === '#register-page') {
        renderRegisterPage();
    } else if (hash === '#login-page') {
        renderLoginPage();
    } else if (hash === '#account-page') {
        renderAccountPage();
    } else if (hash === '#recharge-form-page') {
        renderRechargeFormPage();
    } else if (hash === '#withdraw-form-page') {
        renderWithdrawFormPage();
    } else if (hash === '#change-password-page') { 
        renderChangePasswordPage();
    } else if (hash === '#user-list-page') { // ·ä†·ã≤·àµ ·ã®·ä†·ãµ·àö·äï ·åà·åΩ
        renderUserListPage();
    } else {
        // ·ãà·ã∞ ·àò·äê·àª ·åà·åΩ (·àù·ãù·åà·â£) ·ã≠·àò·àç·à≥·àç
        renderRegisterPage();
    }
}

// ·åÖ·àù·à≠ (Initialization)
window.addEventListener('hashchange', handleHashChange);
window.addEventListener('load', () => {
    // ·åà·åπ ·à≤·ä®·çà·âµ loadAllData() ·ä†·äï·ãµ ·åä·ãú ·àò·å†·à´·â±·äï ·ä•·äì·à®·åã·åç·å£·àà·äï
    loadAllData();
    handleHashChange(); // ·åà·åπ·äï ·àò·å´·äï
});